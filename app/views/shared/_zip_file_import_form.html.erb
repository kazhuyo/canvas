<div id="uploading_please_wait_dialog" title="<%= t('titles.uploading', %{Uploading, Please Wait.}) %>" style="display:none;">
  <div id="uploading_progressbar"></div>
  <p><%= t 'notices.uploading_progress_info', 'Uploading and processing your zip file, if there are a lot of files in the zip file or it is very large, this may take a while.' %></p>
</div>
<% form_for((@zfi || ZipFileImport.new), :url => context_url(@context, :context_zip_file_imports_url), :html => { :id => "zip_file_import_form", :multipart => true })  do |form| %>
  <input type="hidden" name="batch_id" value="<%= AutoHandle.generate(@current_user.asset_string, 10) %>" id="zip_import_batch_id"/>
  <%= form.error_messages %>
  <div>
    <input type="file" name="zip_file" id="zip_file"/><br/>
    <span style="font-size: 0.8em; color: #a00; display: none;" id="zip_only_message"><%= t 'prompts.select_file', 'Please select a .zip file for uploading' %></span>
  </div>
  <div id="upload_to" style="margin: 10px 0;">
    <%= before_label :upload_to, 'Upload to' %>
    <select name="folder_id">
      <%= folders_as_options(Folder.root_folders(@context), :all_folders => @context.folders.active, :selected_folder_id => params[:folder_id].to_i) %>
    </select>
    <%= hidden_field_tag 'return_to', qti_or_content_link %>
  </div>
  <div class="button-container">
    <button type="submit" class="submit_button button big-button"><%= t 'buttons.upload_file', 'Upload File' %></button>
    <a class="cancel_button button button-secondary" href="#"><%= t '#buttons.cancel', 'Cancel' %></a>
  </div>
  <a href="<%= context_url(@context, :context_zip_file_import_url, "{{ id }}", :format => :json) %>" class="zip_file_import_status_url" style="display: none;">&nbsp;</a>
<% end %>
<% js_block do %>
<script>
require([
  'i18nObj' /* I18n.t */,
  'jquery' /* $ */,
  'jquery.ajaxJSON' /* getJSON */,
  'jqueryui/dialog',
  'compiled/jquery.rails_flash_notifications',
  'jqueryui/progressbar' /* /\.progressbar/ */
], function(I18n, $) {

$(document).ready(function() {
  $("#zip_file_import_form #zip_file").change(function() {
    var val = $(this).val();
    if(val && !val.match(/\.zip$/)) {
      $("#zip_only_message").show();
      $("#upload_form .submit_button").attr('disabled', true);
    } else {
      $("#zip_only_message").hide();
      $("#upload_form .submit_button").attr('disabled', false);
    }
  }).change();
  $("#uploading_progressbar").progressbar();
  $("#zip_file_import_form").submit(function(){
    $("#uploading_please_wait_dialog").dialog({
      bgiframe: true,
      width: 400,
      modal: true,
      closeOnEscape: false,
      dialogClass: "ui-dialog-no-close-button"
    });
    return true;
  });
  var $frame = $("<iframe id='import_frame' name='import_frame'/>")
  $("body").append($frame.hide());
  $("#zip_file_import_form").attr('target', 'import_frame');
  $("#zip_file_import_form").submit(function(event) {
    event.preventDefault();
    
    $("#uploading_progressbar").progressbar('value', 0);
    
    var pollURL = null;
    
    $("#zip_file_import_form .errors").hide();
    var importFailed = function(errors) {
      var $div = $("<div class='errors' style='color: #a00; font-weight: bold;'/>");
      var error_message = <%= jt('#zip_file_imports.errors.extracting_file', "There were some errors extracting the zip file.  Please try again") %>;
      $div.text(error_message);
      $.flashError(error_message);
      $("#zip_import_batch_id").val($("#zip_import_batch_id").val() + "0");
      var $ul = $("<ul class='errors'/>");
      for(var idx in errors) {
        var error = errors[idx];
        var $li = $("<li/>");
        $li.text(error);
        $ul.append($li);
      }
      $("#zip_file_import_form .errors").hide();
      $("#zip_file_import_form").prepend($ul).prepend($div);
      $("#uploading_please_wait_dialog").dialog('close');
    }
    var pollImport = function() {
      $.getJSON(pollURL, function(data) {
        var zfi = data.zip_file_import;
        if (zfi == null) {
          pollImport.blankCount = pollImport.blankCount || 0;
          pollImport.blankCount++;
          if(pollImport.blankCount > 10) {
            importFailed([<%= jt('#zip_file_imports.errors.server_status', "The server stopped returning a valid status") %>]);
          } else {
            setTimeout(pollImport, 2000);
          }
        } else if (zfi.data && zfi.data.errors) {
          importFailed(zfi.data.errors);
        } else if (zfi.workflow_state == 'failed') {
          importFailed([]);
        } else if (zfi.workflow_state == 'imported') {
          $("#uploading_progressbar").progressbar('value', 100);
          $("#uploading_please_wait_dialog").prepend(<%= jt('notices.uploading_complete', "Uploading complete!") %>);
          location.href = $("#return_to").val();
        } else {
          pollImport.errorCount = 0;
          pollImport.blankCount = 0;
          $("#uploading_progressbar").progressbar('value', ((zfi.progress || 0) * 100));
          setTimeout(pollImport, 2000);
        }
      }, function() {
        pollImport.errorCount = pollImport.errorCount || 0;
        pollImport.errorCount++;
        if(pollImport.errorCount > 10) {
          importFailed([<%= jt('#zip_file_imports.errors.server_stopped_responding', "The server stopped responding to status requests") %>]);
        } else {
          setTimeout(pollImport, 2000);
        }
      });
    };
    
    var params = {
      'folder_id': $(this).find("select[name=folder_id]").val(),
      'format': 'json'
    };
    
    $.ajaxJSONFiles(
      $(this).attr('action'),
      'POST',
      params,
      $(this).find("#zip_file"),
      function(data) {
        zip_import_id = data.zip_file_import.id;
        pollURL = $(".zip_file_import_status_url").attr('href');
        pollURL = $.replaceTags(pollURL, 'id', zip_import_id);
        
        pollImport();
      },
      function(data) {
        $dialog.text(<%= jt('errors.uploading', "There were errors uploading the zip file.")%>);
      }
    );
  });
});
});
</script>
<% end %>
